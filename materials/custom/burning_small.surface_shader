<shader>

	<inputs>
		<input name="glowpoints" type="texture" address="wrap" srgb="true"/>
		<input name="noiseMap" type="texture" address="wrap" srgb="true"/>
	


	</inputs>	

	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="twoSided">false</param>
		<param name="alphaTest">true</param>

	</params>
	
	<code> 
	<![CDATA[
		void MaterialShader(in Material_Input input, inout Material material)
		{
		
			const float3 tint = float3(100, 16, 2)*0.05;
			
			// Offset the position.
			material.wsOffset = input.wsNormal * 0.03;
			float scale = 0.1;
			float2 newcoord = input.texCoord * scale;
			float3 ash = tex2D( glowpoints, newcoord  * 9 ).rgb;
			float3 noise = tex2D( noiseMap, newcoord  * 2 + float2(time * .35, time * 0.61)*scale ).rgb;
			float3 noise2 = tex2D( noiseMap, newcoord  * float2( 3.2, 2.7) + float2(time * -.41, time * .73)*scale ).rgb;
			float3 noise3 = tex2D( noiseMap, newcoord  * float2( 1.8, 2.1) + float2(time * -.1, time * .3)*scale ).rgb;
			float fresnel =  pow(max(-input.vsNormal.z, 0), 13);
			
		

			material.emissive = ( noise * noise2 ) * tint;
			material.opacity = ( (noise + noise2 ) * noise3 + ash) * .03 * fresnel ;
			
		}
	]]>
	</code>

</shader>